{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Documents\\\\react-16.8\\\\src\\\\cmpnts\\\\BarGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bar = () => {\n  _s();\n  const [xAxisName, setXAxisName] = useState('');\n  const [yAxisValue, setYAxisValue] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('/your-backend-api-url');\n\n        // Extract the x-axis name and y-axis value from the response\n        const {\n          xAxis,\n          yAxis\n        } = response.data;\n        setXAxisName(xAxis);\n        setYAxisValue(yAxis);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    Highcharts.chart('BarGraph', {\n      chart: {\n        type: 'column',\n        square: true,\n        backgroundColor: 'transparent'\n      },\n      title: {\n        align: 'center',\n        text: 'Total Amount Per Distribution Channel',\n        style: {\n          color: 'white'\n        }\n      },\n      xAxis: {\n        categories: [xAxisName],\n        visible: true,\n        labels: {\n          style: {\n            color: 'white'\n          }\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'Value',\n          style: {\n            color: 'white'\n          }\n        },\n        labels: {\n          style: {\n            color: 'white'\n          }\n        }\n      },\n      series: [{\n        name: 'Value',\n        data: [parseFloat(yAxisValue)],\n        dataLabels: {\n          enabled: true,\n          color: 'white'\n        }\n      }]\n    });\n  }, [xAxisName, yAxisValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"BarGraph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(Bar, \"b2+wsOLz4e1XHh3Oqk7vlwGkKsM=\");\n_c = Bar;\nexport default Bar;\nvar _c;\n$RefreshReg$(_c, \"Bar\");","map":{"version":3,"names":["React","useEffect","useState","Highcharts","axios","jsxDEV","_jsxDEV","Bar","_s","xAxisName","setXAxisName","yAxisValue","setYAxisValue","fetchData","response","get","xAxis","yAxis","data","error","console","chart","type","square","backgroundColor","title","align","text","style","color","categories","visible","labels","series","name","parseFloat","dataLabels","enabled","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KIIT/Documents/react-16.8/src/cmpnts/BarGraph.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport axios from 'axios';\r\n\r\nconst Bar = () => {\r\n  const [xAxisName, setXAxisName] = useState('');\r\n  const [yAxisValue, setYAxisValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('/your-backend-api-url');\r\n\r\n        // Extract the x-axis name and y-axis value from the response\r\n        const { xAxis, yAxis } = response.data;\r\n\r\n        setXAxisName(xAxis);\r\n        setYAxisValue(yAxis);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Highcharts.chart('BarGraph', {\r\n      chart: {\r\n        type: 'column',\r\n        square: true,\r\n        backgroundColor: 'transparent',\r\n      },\r\n      title: {\r\n        align: 'center',\r\n        text: 'Total Amount Per Distribution Channel',\r\n        style: {\r\n          color: 'white',\r\n        },\r\n      },\r\n      xAxis: {\r\n        categories: [xAxisName],\r\n        visible: true,\r\n        labels: {\r\n          style: {\r\n            color: 'white',\r\n          },\r\n        },\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: 'Value',\r\n          style: {\r\n            color: 'white',\r\n          },\r\n        },\r\n        labels: {\r\n          style: {\r\n            color: 'white',\r\n          },\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          name: 'Value',\r\n          data: [parseFloat(yAxisValue)],\r\n          dataLabels: {\r\n            enabled: true,\r\n            color: 'white',\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  }, [xAxisName, yAxisValue]);\r\n\r\n  return <div id=\"BarGraph\"></div>;\r\n};\r\n\r\nexport default Bar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,uBAAuB,CAAC;;QAEzD;QACA,MAAM;UAAEC,KAAK;UAAEC;QAAM,CAAC,GAAGH,QAAQ,CAACI,IAAI;QAEtCR,YAAY,CAACM,KAAK,CAAC;QACnBJ,aAAa,CAACK,KAAK,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,MAAM;IACdE,UAAU,CAACkB,KAAK,CAAC,UAAU,EAAE;MAC3BA,KAAK,EAAE;QACLC,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE,IAAI;QACZC,eAAe,EAAE;MACnB,CAAC;MACDC,KAAK,EAAE;QACLC,KAAK,EAAE,QAAQ;QACfC,IAAI,EAAE,uCAAuC;QAC7CC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT;MACF,CAAC;MACDb,KAAK,EAAE;QACLc,UAAU,EAAE,CAACrB,SAAS,CAAC;QACvBsB,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE;UACNJ,KAAK,EAAE;YACLC,KAAK,EAAE;UACT;QACF;MACF,CAAC;MACDZ,KAAK,EAAE;QACLQ,KAAK,EAAE;UACLE,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE;YACLC,KAAK,EAAE;UACT;QACF,CAAC;QACDG,MAAM,EAAE;UACNJ,KAAK,EAAE;YACLC,KAAK,EAAE;UACT;QACF;MACF,CAAC;MACDI,MAAM,EAAE,CACN;QACEC,IAAI,EAAE,OAAO;QACbhB,IAAI,EAAE,CAACiB,UAAU,CAACxB,UAAU,CAAC,CAAC;QAC9ByB,UAAU,EAAE;UACVC,OAAO,EAAE,IAAI;UACbR,KAAK,EAAE;QACT;MACF,CAAC;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACpB,SAAS,EAAEE,UAAU,CAAC,CAAC;EAE3B,oBAAOL,OAAA;IAAKgC,EAAE,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAClC,CAAC;AAAClC,EAAA,CAxEID,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AA0ET,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}